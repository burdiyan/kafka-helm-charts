apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        hostPort: {{ .Values.restPort | quote }}
        containerPort: {{ .Values.restPort | quote }}
        pipeline: {{ .Values.monitoring.pipeline | quote }}
      annotations:
        prometheus.io/scrape: {{ .Values.monitoring.enabled | quote }}
        prometheus.io/port: {{ .Values.monitoring.port | quote }}
        prometheus.io/path: {{ .Values.monitoring.path | quote }}
    spec:
      volumes:
        # Use for SSL keystores and trust stores from host path or persistent volumes
        {{- if .Values.ssl.enabled}}
        - name: connect-ssl
        {{- if .Values.ssl.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.ssl.persistentVolume.existingClaim }}{{ .Values.ssl.persistentVolume.existingClaim }}{{- else }}{{ template "fullname" . }}{{- end }}
        {{- else}}
          hostPath:
            path: {{ .Values.ssl.path }}
        {{- end -}}
        {{- end -}}
        # Get TKS from secrets
        {{- if .Values.tls.enabled }}
        - name: connect-tls
          secret:
            secretName: {{ .Values.secretsRef | quote }}
        {{- end }}
        # Get avro schemas from config-map
        {{- if .Values.avroSchemas }}
        - name: connect-avro-schemas
          configMap:
            name: {{ template "fullname" . }}
        {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.restPort }}
        livenessProbe:
          exec:
            command:
            - /etc/confluent/liveliness.sh
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
          {{- if .Values.ssl.enabled }}
          - mountPath: /connector-ssl
            name: connect-ssl
          {{- end -}}
          {{- if .Values.tls.enabled }}
          - mountPath: /connector-tls
            name: connect-tls
          {{- end }}
          {{- if .Values.avroSchemas }}
          - mountPath: /connector-avro-schemas
            name: connect-avro-schemas
          {{- end }}
        env:
        # JVM Heap Allowance
        - name: KAFKA_HEAP_OPTS
          value: -Xmx{{ .Values.javaHeap }}
        - name: CONNECT_LOG4J_ROOT_LOGLEVEL
          value: {{ .Values.logLevel | quote }}
        - name: CONNECT_GROUP_ID
          value: {{ .Values.clusterName | quote }}
        - name: CONNECT_BOOTSTRAP_SERVERS
          value: {{ .Values.bootstrapServers | quote }}
        - name: CONNECT_REST_PORT
          value: {{ .Values.restPort | quote }}
        - name: CONNECT_CONFIG_STORAGE_TOPIC
          value: "connect_{{ .Values.clusterName }}_configs"
        - name: CONNECT_OFFSET_STORAGE_TOPIC
          value: "connect_{{ .Values.clusterName }}_offsets"
        - name: CONNECT_STATUS_STORAGE_TOPIC
          value: "connect_{{ .Values.clusterName }}_statuses"
        - name: CONNECT_KEY_CONVERTER
          value: "io.confluent.connect.avro.AvroConverter"
        - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
          value: {{ .Values.schemaRegistryURL | quote }}
        - name: CONNECT_VALUE_CONVERTER
          value: "io.confluent.connect.avro.AvroConverter"
        - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
          value: {{ .Values.schemaRegistryURL | quote }}
        - name: CONNECT_INTERNAL_KEY_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_INTERNAL_VALUE_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name:  CONNECT_PLUGIN_PATH
          value: "/etc/datamountaineer/jars"

        - name: CONNECTOR_CONNECT_FTP_ADDRESS
          value: {{ .Values.address | quote }}
        - name: CONNECTOR_CONNECT_FTP_FILE_MAXAGE
          value: {{ .Values.fileMaxage | quote }}
        - name: CONNECTOR_CONNECT_FTP_KEYSTYLE
          value: {{ .Values.keystyle | quote }}
        - name: CONNECTOR_CONNECT_FTP_MAX_POLL_RECORDS
          value: {{ .Values.maxPollRecords | quote }}
        - name: CONNECTOR_CONNECT_FTP_MONITOR_TAIL
          value: {{ .Values.monitorTail | quote }}
        - name: CONNECTOR_CONNECT_FTP_USER
          value: {{ .Values.user | quote }}
        - name: CONNECTOR_CONNECT_FTP_SOURCERECORDCONVERTER
          value: {{ .Values.sourcerecordconverter | quote }}
        - name: CONNECTOR_CONNECT_FTP_MAX_BACKOFF
          value: {{ .Values.maxBackoff | quote }}
        - name: CONNECTOR_CONNECT_FTP_MONITOR_UPDATE
          value: {{ .Values.monitorUpdate | quote }}
        - name: CONNECTOR_CONNECT_FTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secretsRef | quote }}
              key:  {{ .Values.passwordKey }}
        - name: CONNECTOR_CONNECT_FTP_FILECONVERTER
          value: {{ .Values.fileconverter | quote }}
        - name: CONNECTOR_CONNECT_FTP_REFRESH
          value: {{ .Values.refresh | quote }}
